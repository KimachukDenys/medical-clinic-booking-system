{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u0447\\u043D\\u0456 4 \\u043A\\u0443\\u0440\\u0441\\\\\\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 2\\\\\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u043D\\u0438\\u0439 \\u043F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C\\\\clinic-booking-system\\\\client\\\\src\\\\pages\\\\BookAppointmentPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // для отримання параметрів URL\nimport { createAppointment, getBookedSlots } from '../api/appointmentApi';\nimport axios from 'axios';\nimport AppointmentForm from '../components/services/AppointmentForm';\nimport { getDoctorsForService } from '../api/serviceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookAppointmentPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Отримуємо serviceId з URL\n  const [doctorId, setDoctorId] = useState('');\n  const [appointmentData, setAppointmentData] = useState({\n    date: '',\n    time: ''\n  });\n  const [doctors, setDoctors] = useState([]);\n  const [bookedSlots, setBookedSlots] = useState([]);\n  const [message, setMessage] = useState('');\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    if (!token || !id) return;\n    getDoctorsForService(Number(id), token).then(res => {\n      setDoctors(res.data);\n    }).catch(() => {\n      setMessage('Не вдалося завантажити лікарів для цієї послуги.');\n    });\n  }, [token, id]);\n  useEffect(() => {\n    if (!token) return;\n    axios.get('http://localhost:5000/api/users/doctors', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => setDoctors(res.data)).catch(() => setMessage('Не вдалося завантажити лікарів.'));\n  }, [token]);\n  useEffect(() => {\n    if (doctorId && appointmentData.date && token) {\n      getBookedSlots(Number(doctorId), appointmentData.date, token).then(res => {\n        setBookedSlots(res.data); // має бути список рядків типу \"09:00\"\n      }).catch(() => setBookedSlots([]));\n    } else {\n      setBookedSlots([]);\n    }\n  }, [doctorId, appointmentData.date, token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!token) {\n      setMessage('Будь ласка, увійдіть для запису.');\n      return;\n    }\n    const {\n      date,\n      time\n    } = appointmentData;\n    if (!date || !time) {\n      setMessage('Оберіть дату та час.');\n      return;\n    }\n    try {\n      const datetime = `${date}T${time}:00`;\n      await createAppointment({\n        doctorId: Number(doctorId),\n        serviceId: Number(id),\n        // Використовуємо serviceId з URL\n        date: datetime\n      }, token);\n      setMessage('Запис успішно створено!');\n      setDoctorId('');\n      setAppointmentData({\n        date: '',\n        time: ''\n      });\n    } catch (err) {\n      setMessage('Помилка при створенні запису.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0417\\u0430\\u043F\\u0438\\u0441 \\u043D\\u0430 \\u043F\\u0440\\u0438\\u0439\\u043E\\u043C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\u041B\\u0456\\u043A\\u0430\\u0440:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: doctorId,\n          onChange: e => setDoctorId(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"\\u041E\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u043B\\u0456\\u043A\\u0430\\u0440\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: doctor.id,\n            children: [doctor.firstName, \" \", doctor.lastName]\n          }, doctor.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppointmentForm, {\n        value: appointmentData,\n        onChange: setAppointmentData,\n        doctorId: Number(doctorId),\n        token: token || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\u0417\\u0430\\u043F\\u0438\\u0441\\u0430\\u0442\\u0438\\u0441\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(BookAppointmentPage, \"w8aLi7QQ5GdS9lfDQGYP7MgqEas=\", false, function () {\n  return [useParams];\n});\n_c = BookAppointmentPage;\nexport default BookAppointmentPage;\nvar _c;\n$RefreshReg$(_c, \"BookAppointmentPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","createAppointment","getBookedSlots","axios","AppointmentForm","getDoctorsForService","jsxDEV","_jsxDEV","BookAppointmentPage","_s","id","doctorId","setDoctorId","appointmentData","setAppointmentData","date","time","doctors","setDoctors","bookedSlots","setBookedSlots","message","setMessage","token","localStorage","getItem","Number","then","res","data","catch","get","headers","Authorization","handleSubmit","e","preventDefault","datetime","serviceId","err","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","required","map","doctor","firstName","lastName","type","_c","$RefreshReg$"],"sources":["D:/Практичні 4 курс/семестр 2/Проєктний практикум/clinic-booking-system/client/src/pages/BookAppointmentPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // для отримання параметрів URL\r\nimport { createAppointment, getBookedSlots } from '../api/appointmentApi';\r\nimport axios from 'axios';\r\nimport AppointmentForm from '../components/services/AppointmentForm';\r\nimport { getDoctorsForService } from '../api/serviceApi';\r\n\r\ninterface Doctor {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\nconst BookAppointmentPage: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>(); // Отримуємо serviceId з URL\r\n  const [doctorId, setDoctorId] = useState('');\r\n  const [appointmentData, setAppointmentData] = useState({ date: '', time: '' });\r\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\r\n  const [bookedSlots, setBookedSlots] = useState<string[]>([]);\r\n  const [message, setMessage] = useState('');\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    if (!token || !id) return;\r\n\r\n    getDoctorsForService(Number(id), token)\r\n      .then((res) => {\r\n        setDoctors(res.data);\r\n      })\r\n      .catch(() => {\r\n        setMessage('Не вдалося завантажити лікарів для цієї послуги.');\r\n      });\r\n  }, [token, id]);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    axios.get('http://localhost:5000/api/users/doctors', {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    })\r\n      .then(res => setDoctors(res.data))\r\n      .catch(() => setMessage('Не вдалося завантажити лікарів.'));\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (doctorId && appointmentData.date && token) {\r\n      getBookedSlots(Number(doctorId), appointmentData.date, token)\r\n        .then((res) => {\r\n          setBookedSlots(res.data); // має бути список рядків типу \"09:00\"\r\n        })\r\n        .catch(() => setBookedSlots([]));\r\n    } else {\r\n      setBookedSlots([]);\r\n    }\r\n  }, [doctorId, appointmentData.date, token]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!token) {\r\n      setMessage('Будь ласка, увійдіть для запису.');\r\n      return;\r\n    }\r\n\r\n    const { date, time } = appointmentData;\r\n    if (!date || !time) {\r\n      setMessage('Оберіть дату та час.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const datetime = `${date}T${time}:00`;\r\n      await createAppointment(\r\n        {\r\n          doctorId: Number(doctorId),\r\n          serviceId: Number(id), // Використовуємо serviceId з URL\r\n          date: datetime,\r\n        },\r\n        token\r\n      );\r\n      setMessage('Запис успішно створено!');\r\n      setDoctorId('');\r\n      setAppointmentData({ date: '', time: '' });\r\n    } catch (err) {\r\n      setMessage('Помилка при створенні запису.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Запис на прийом</h1>\r\n\r\n      {message && <p>{message}</p>}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Лікар:</label>\r\n          <select value={doctorId} onChange={(e) => setDoctorId(e.target.value)} required>\r\n            <option value=\"\">Оберіть лікаря</option>\r\n            {doctors.map((doctor) => (\r\n              <option key={doctor.id} value={doctor.id}>\r\n                {doctor.firstName} {doctor.lastName}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Вилучаємо поле вибору послуги */}\r\n        {/* <div>\r\n          <label>Послуга:</label>\r\n          <select value={serviceId} onChange={(e) => setServiceId(e.target.value)} required>\r\n            <option value=\"\">Оберіть послугу</option>\r\n            {services.map((service) => (\r\n              <option key={service.id} value={service.id}>\r\n                {service.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div> */}\r\n\r\n        <AppointmentForm\r\n          value={appointmentData}\r\n          onChange={setAppointmentData}\r\n          doctorId={Number(doctorId)}\r\n          token={token || ''}  \r\n        />\r\n\r\n        <button type=\"submit\">Записатись</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookAppointmentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}