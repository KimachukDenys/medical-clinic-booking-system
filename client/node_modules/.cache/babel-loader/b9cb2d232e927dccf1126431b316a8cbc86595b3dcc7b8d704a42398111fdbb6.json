{"ast":null,"code":"// src/api/appointmentApi.ts\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/services/appointments';\n;\nexport const createAppointment = async (data, token) => {\n  const response = await axios.post(API_URL, data, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data; // повертаємо лише дані\n};\nexport const updateAppointment = async (id, updatedData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, updatedData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error('Не вдалося оновити бронювання');\n  }\n};\nexport const getBookedSlots = async (doctorId, date, token) => {\n  return axios.get(`${API_URL}/booked`, {\n    params: {\n      doctorId,\n      date\n    },\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const getAllAppointments = token => {\n  return axios.get(`${API_URL}/list`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const getAppointmentById = (id, token) => {\n  return axios.get(`${API_URL}/details/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const deleteAppointmentById = (id, token) => {\n  return axios.delete(`${API_URL}/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};","map":{"version":3,"names":["axios","API_URL","createAppointment","data","token","response","post","headers","Authorization","updateAppointment","id","updatedData","put","error","Error","getBookedSlots","doctorId","date","get","params","getAllAppointments","getAppointmentById","deleteAppointmentById","delete"],"sources":["D:/Практичні 4 курс/семестр 2/Проєктний практикум/clinic-booking-system/client/src/api/appointmentApi.ts"],"sourcesContent":["// src/api/appointmentApi.ts\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/services/appointments';\r\n\r\ninterface AppointmentData {\r\n  doctorId: number;\r\n  serviceId: number;\r\n  date: string;\r\n};\r\n\r\nexport const createAppointment = async (\r\n  data: AppointmentData,\r\n  token: string\r\n) => {\r\n  const response = await axios.post(API_URL, data, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  return response.data; // повертаємо лише дані\r\n};\r\n\r\nexport const updateAppointment = async (id: number, updatedData: any, token: string) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`,updatedData, {\r\n        headers: {Authorization: `Bearer ${token}`},\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Не вдалося оновити бронювання');\r\n  }\r\n};\r\n\r\nexport const getBookedSlots = async (doctorId: number, date: string, token: string) => {\r\n  return axios.get(`${API_URL}/booked`, {\r\n    params: { doctorId, date },\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n};\r\n\r\nexport const getAllAppointments = (token: string | null) => {\r\n  return axios.get(`${API_URL}/list`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const getAppointmentById = (id: number, token: string) => {\r\n  return axios.get(`${API_URL}/details/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const deleteAppointmentById = (id: number, token: string) => {\r\n  return axios.delete(`${API_URL}/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,iDAAiD;AAMhE;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAC/BC,IAAqB,EACrBC,KAAa,KACV;EACH,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAACL,OAAO,EAAEE,IAAI,EAAE;IAC/CI,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACF,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAG,MAAAA,CAAOC,EAAU,EAAEC,WAAgB,EAAEP,KAAa,KAAK;EACtF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,IAAIS,EAAE,EAAE,EAACC,WAAW,EAAE;MAC7DJ,OAAO,EAAE;QAACC,aAAa,EAAE,UAAUJ,KAAK;MAAE;IAC5C,CACF,CAAC;IACD,OAAOC,QAAQ,CAACF,IAAI;EACtB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,IAAY,EAAEb,KAAa,KAAK;EACrF,OAAOJ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,SAAS,EAAE;IACpCkB,MAAM,EAAE;MAAEH,QAAQ;MAAEC;IAAK,CAAC;IAC1BV,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUJ,KAAK;IAAG;EAC9C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAIhB,KAAoB,IAAK;EAC1D,OAAOJ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,OAAO,EAAE;IAClCM,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMiB,kBAAkB,GAAGA,CAACX,EAAU,EAAEN,KAAa,KAAK;EAC/D,OAAOJ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,YAAYS,EAAE,EAAE,EAAE;IAC3CH,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMkB,qBAAqB,GAAGA,CAACZ,EAAU,EAAEN,KAAa,KAAK;EAClE,OAAOJ,KAAK,CAACuB,MAAM,CAAC,GAAGtB,OAAO,IAAIS,EAAE,EAAE,EAAE;IACtCH,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}