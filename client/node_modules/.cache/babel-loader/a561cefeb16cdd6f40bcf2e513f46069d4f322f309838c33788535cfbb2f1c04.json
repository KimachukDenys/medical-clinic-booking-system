{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u0430\\u043A\\u0442\\u0438\\u0447\\u043D\\u0456 4 \\u043A\\u0443\\u0440\\u0441\\\\\\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440 2\\\\\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u043D\\u0438\\u0439 \\u043F\\u0440\\u0430\\u043A\\u0442\\u0438\\u043A\\u0443\\u043C\\\\clinic-booking-system\\\\client\\\\src\\\\components\\\\services\\\\AssignDoctorForm.tsx\",\n  _s = $RefreshSig$();\n// components/services/AssignDoctorForm.tsx\nimport React, { useEffect, useState } from 'react';\nimport { assignDoctorToService } from '../../api/serviceApi';\nimport { getAllDoctors } from '../../api/doctorApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssignDoctorForm = ({\n  serviceId,\n  token,\n  onClose\n}) => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState('');\n  useEffect(() => {\n    getAllDoctors().then(res => setDoctors(res.data)).catch(() => alert('Не вдалося завантажити список докторів'));\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!selectedDoctor) return;\n    try {\n      await assignDoctorToService(serviceId, Number(selectedDoctor), token);\n      alert('Доктора додано до сервісу!');\n      onClose();\n    } catch {\n      alert('Помилка при додаванні доктора.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedDoctor,\n      onChange: e => setSelectedDoctor(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"\\u041E\\u0431\\u0435\\u0440\\u0456\\u0442\\u044C \\u0434\\u043E\\u043A\\u0442\\u043E\\u0440\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), doctors.map(doc => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: doc.id,\n        children: [doc.name, \" (\", doc.email, \")\"]\n      }, doc.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onClose,\n      children: \"\\u0421\\u043A\\u0430\\u0441\\u0443\\u0432\\u0430\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AssignDoctorForm, \"gdKPF+Cc+nW7JCTPKdGHURuXcaI=\");\n_c = AssignDoctorForm;\nexport default AssignDoctorForm;\nvar _c;\n$RefreshReg$(_c, \"AssignDoctorForm\");","map":{"version":3,"names":["React","useEffect","useState","assignDoctorToService","getAllDoctors","jsxDEV","_jsxDEV","AssignDoctorForm","serviceId","token","onClose","_s","doctors","setDoctors","selectedDoctor","setSelectedDoctor","then","res","data","catch","alert","handleSubmit","e","preventDefault","Number","onSubmit","children","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","map","doc","id","name","email","type","onClick","_c","$RefreshReg$"],"sources":["D:/Практичні 4 курс/семестр 2/Проєктний практикум/clinic-booking-system/client/src/components/services/AssignDoctorForm.tsx"],"sourcesContent":["// components/services/AssignDoctorForm.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { assignDoctorToService } from '../../api/serviceApi';\r\nimport { getAllDoctors } from '../../api/doctorApi';\r\n\r\ninterface Props {\r\n  serviceId: number;\r\n  token: string;\r\n  onClose: () => void;\r\n}\r\n\r\ninterface Doctor {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst AssignDoctorForm: React.FC<Props> = ({ serviceId, token, onClose }) => {\r\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\r\n  const [selectedDoctor, setSelectedDoctor] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    getAllDoctors()\r\n      .then(res => setDoctors(res.data))\r\n      .catch(() => alert('Не вдалося завантажити список докторів'));\r\n  }, []);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedDoctor) return;\r\n\r\n    try {\r\n      await assignDoctorToService(serviceId, Number(selectedDoctor), token);\r\n      alert('Доктора додано до сервісу!');\r\n      onClose();\r\n    } catch {\r\n      alert('Помилка при додаванні доктора.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <select value={selectedDoctor} onChange={e => setSelectedDoctor(e.target.value)}>\r\n        <option value=\"\">Оберіть доктора</option>\r\n        {doctors.map(doc => (\r\n          <option key={doc.id} value={doc.id}>\r\n            {doc.name} ({doc.email})\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button type=\"submit\">Додати</button>\r\n      <button type=\"button\" onClick={onClose}>Скасувати</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AssignDoctorForm;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAcpD,MAAMC,gBAAiC,GAAGA,CAAC;EAAEC,SAAS;EAAEC,KAAK;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAS,EAAE,CAAC;EAEhED,SAAS,CAAC,MAAM;IACdG,aAAa,CAAC,CAAC,CACZY,IAAI,CAACC,GAAG,IAAIJ,UAAU,CAACI,GAAG,CAACC,IAAI,CAAC,CAAC,CACjCC,KAAK,CAAC,MAAMC,KAAK,CAAC,wCAAwC,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAOC,CAAkB,IAAK;IACjDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACT,cAAc,EAAE;IAErB,IAAI;MACF,MAAMX,qBAAqB,CAACK,SAAS,EAAEgB,MAAM,CAACV,cAAc,CAAC,EAAEL,KAAK,CAAC;MACrEW,KAAK,CAAC,4BAA4B,CAAC;MACnCV,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,MAAM;MACNU,KAAK,CAAC,gCAAgC,CAAC;IACzC;EACF,CAAC;EAED,oBACEd,OAAA;IAAMmB,QAAQ,EAAEJ,YAAa;IAAAK,QAAA,gBAC3BpB,OAAA;MAAQqB,KAAK,EAAEb,cAAe;MAACc,QAAQ,EAAEN,CAAC,IAAIP,iBAAiB,CAACO,CAAC,CAACO,MAAM,CAACF,KAAK,CAAE;MAAAD,QAAA,gBAC9EpB,OAAA;QAAQqB,KAAK,EAAC,EAAE;QAAAD,QAAA,EAAC;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACxCrB,OAAO,CAACsB,GAAG,CAACC,GAAG,iBACd7B,OAAA;QAAqBqB,KAAK,EAAEQ,GAAG,CAACC,EAAG;QAAAV,QAAA,GAChCS,GAAG,CAACE,IAAI,EAAC,IAAE,EAACF,GAAG,CAACG,KAAK,EAAC,GACzB;MAAA,GAFaH,GAAG,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACT3B,OAAA;MAAQiC,IAAI,EAAC,QAAQ;MAAAb,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrC3B,OAAA;MAAQiC,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAE9B,OAAQ;MAAAgB,QAAA,EAAC;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEX,CAAC;AAACtB,EAAA,CArCIJ,gBAAiC;AAAAkC,EAAA,GAAjClC,gBAAiC;AAuCvC,eAAeA,gBAAgB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}